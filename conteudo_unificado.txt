

===== C:\Code\Brazil-As-100-People\.\scripts\bars_chart.js =====
import * as d3 from "https://cdn.jsdelivr.net/npm/d3@7/+esm";
import SETTINGS from "./settings.js";

export default function initBarsChart({ nodes, color, labels, totals }) {

  /* ------------------------------------------------------------------
   * 1. cria o segundo SVG e escalas
   * ----------------------------------------------------------------*/
  const svg    = d3.select("#bars-svg");
  const width  = svg.node().clientWidth;
  const height = svg.node().clientHeight;

  // escala de banda para 5 grupos
  const xBand  = d3.scaleBand()
                   .domain(d3.range(labels.length))
                   .range([width * 0.1, width * 0.9])
                   .paddingInner(0.3);

  // altura de cada pilha = 100 círculos → empilhamento vertical
  const yStep = height * 0.7 / 100;

  // posição-alvo de cada nó no bar-chart
  nodes.forEach(n => {
    const g = n.group;                // 0…4
    const idxInside = n.barIndex = (n.barIndex ?? 0) + 1; // 1…?
    n.targetX = xBand(g) + xBand.bandwidth() / 2;
    n.targetY = height * 0.85 - idxInside * yStep;
  });

  // copia os círculos visuais pro novo svg (mesmo <circle>, novo ownerSVG)
  const circles = d3.select("#race-svg")
                    .selectAll("circle")
                    .each(function () {
                      svg.node().appendChild(this);
                    });

  /* ------------------------------------------------------------------
   * 2. IntersectionObserver → dispara transição
   * ----------------------------------------------------------------*/
  const observer = new IntersectionObserver(entries => {
    entries.forEach(e => {
      if (e.isIntersecting) runTransition();
    });
  }, { threshold: 0.6 });

  observer.observe(document.getElementById("scroll-sentinel"));

  function runTransition() {
    observer.disconnect(); // garante que roda só uma vez

    circles.transition()
      .duration(1200)
      .ease(d3.easeCubicInOut)
      .attr("cx", d => d.targetX)
      .attr("cy", d => d.targetY)
      .attr("fill", d => d3.color(color(d.group)).darker(0.6)) // nova cor
      .attr("r",   SETTINGS.node.radius * 1.3)                  // maior
      .attr("stroke-width", 0)
      .attrTween("symbol", function (d) {                       // muda forma
        const symbol = d3.symbol()
                         .type(d3[`symbol${["Circle","Square","Triangle","Diamond","Cross"][d.group]}`])
                         .size(Math.PI * Math.pow(SETTINGS.node.radius*1.3,2));
        return () => symbol();
      });
  }

  /* ------------------------------------------------------------------
   * 3. labels de eixo x
   * ----------------------------------------------------------------*/
  svg.selectAll("text.bar-label")
     .data(labels)
     .join("text")
     .attr("class", "bar-label")
     .attr("x", (_,i) => xBand(i) + xBand.bandwidth()/2)
     .attr("y", height * 0.9)
     .attr("text-anchor", "middle")
     .text(d => d);
}


===== C:\Code\Brazil-As-100-People\.\scripts\main.js =====
import initRaceChart from "./race_chart.js";
import initBarsChart from "./bars_chart.js";

initRaceChart()
  .then(ctx => initBarsChart(ctx))   // ctx = { nodes, color, labels, totals }
  .catch(console.error);


===== C:\Code\Brazil-As-100-People\.\scripts\race_chart.js =====
/* scripts/race_chart.js
 * --------------------------------------------------------------------
 * Cria o 1º gráfico (force-layout) e, quando terminar de montar tudo,
 * devolve { nodes, color, labels, totals } para que outro módulo
 * (bars_chart.js) possa reutilizar os mesmos círculos.
 * ------------------------------------------------------------------*/
import * as d3 from "https://cdn.jsdelivr.net/npm/d3@7/+esm";
import SETTINGS from "./settings.js";

/* ◼️  Exportamos UMA função que devolve uma Promise ────────────────── */
export default function initRaceChart () {
  return new Promise(resolve => {

    /* ---------- configurações gerais ---------- */
    const width  = window.innerWidth  * SETTINGS.dims.widthFactor;
    const height = window.innerHeight * SETTINGS.dims.heightFactor;
    const center = [width / 2, height / 2];

    const color = d3.scaleOrdinal(
      d3.range(SETTINGS.colorScheme.length),
      SETTINGS.colorScheme
    );

    const labels = ["Parda", "Branca", "Preta", "Amarela", "Indígena"];
    const campos = [
      "raca_parda",
      "raca_branca",
      "raca_preta",
      "raca_amarela",
      "raca_indigena"
    ];

    const svg = d3.select("#race-svg")       // << id definido em index.html
                  .attr("width",  width)
                  .attr("height", height);

    /* ---------- carrega dados ---------- */
    d3.csv("data/ibge.csv", d3.autoType).then(data => {

      /* soma população por raça */
      const totais = Array(campos.length).fill(0);
      data.forEach(d => campos.forEach((c,i) => totais[i] += d[c]));

      const totalPop          = d3.sum(totais);
      const percentualPreciso = totais.map(v => v / totalPop * 100);
      const percentual        = percentualPreciso.map(v => Math.round(v));

      /* garantimos que a soma = 100% (regra de arredondamento manual) */
      percentualPreciso.forEach((v,i) => {
        if (v < 1 && percentual[i] < 1) percentual[i] = 1;
      });
      let excesso = d3.sum(percentual) - 100;
      while (excesso > 0) {
        const idx = percentual.indexOf(d3.max(percentual));
        if (percentual[idx] > 1) { percentual[idx]--; excesso--; }
        else break;
      }
      while (d3.sum(percentual) < 100) {
        const idx = percentual.indexOf(d3.max(percentual));
        percentual[idx]++;
      }

      /* monta 100 nós, marcando a que grupo cada um pertence */
      let group = 0, idx = 1;
      const nodes = d3.range(100).map(id => {
        if (idx > percentual[group]) { group++; idx = 1; }
        idx++;
        return { id, group };
      });

      /* ---------- força ---------- */
      const simulation = d3.forceSimulation(nodes)
        .velocityDecay(SETTINGS.forces.velocityDecay)
        .alphaDecay(SETTINGS.forces.alphaDecay)
        .force("collision",
          d3.forceCollide()
            .radius(SETTINGS.forces.collideRadius)
            .strength(SETTINGS.forces.collideStrength)
        )
        .force("x",
          d3.forceX(d => width * 0.1 + d.group * width * 0.2)
            .strength(SETTINGS.forces.xStrength)
        )
        .force("y",
          d3.forceY(height * 0.5)
            .strength(SETTINGS.forces.yStrength)
        )
        .on("tick", ticked);

      /* posição inicial espalhada, mas perto do alvo ― converge rápido */
      nodes.forEach(n => {
        n.x = n.x * 5 + (width * 0.1 + n.group * width * 0.2);
        n.y = n.y * 5 + center[1];
      });

      /* círculos */
      const node = svg.append("g")
        .attr("stroke", SETTINGS.node.stroke)
        .attr("stroke-width", SETTINGS.node.strokeWidth)
        .selectAll("circle")
        .data(nodes)
        .join("circle")
        .attr("r", SETTINGS.node.radius)
        .attr("fill", d => color(d.group));

      /* rótulos embaixo de cada “coluna” */
      svg.selectAll("text.race-label")
        .data(labels)
        .enter()
        .append("text")
        .attr("class", "race-label")
        .text(d => d)
        .attr("x", (_,i) => width * 0.1 + i * width * 0.2)
        .attr("y", height * 0.5 + SETTINGS.labelYOffset)
        .attr("text-anchor", "middle")
        .append("title")
        .text((_,i) => `${percentualPreciso[i].toFixed(2)} %`);

      /* drag (idêntico ao original) */
      node.call(d3.drag()
        .on("start", dragstarted)
        .on("drag",  dragged)
        .on("end",   dragended)
      );

      function ticked() {
        node.attr("cx", d => d.x).attr("cy", d => d.y);
      }
      function dragstarted(e) {
        if (!e.active) simulation.alphaTarget(SETTINGS.forces.dragAlphaTarget).restart();
        e.subject.fx = e.subject.x;
        e.subject.fy = e.subject.y;
      }
      function dragged(e) {
        e.subject.fx = e.x;
        e.subject.fy = e.y;
      }
      function dragended(e) {
        if (!e.active) simulation.alphaTarget(0);
        e.subject.fx = null;
        e.subject.fy = null;
      }

      /* ⬇️ devolve “handles” p/ bars_chart.js */
      resolve({ nodes, color, labels, totals: percentual });
    }); // fim d3.csv
  });   // fim Promise
}


===== C:\Code\Brazil-As-100-People\.\scripts\settings.js =====
// scripts/settings.js
// Centralize aqui valores-padrão que serão reutilizados em todas as visualizações.

const SETTINGS = {
  dims: {
    widthFactor: .6,  // % da largura da janela
    heightFactor: 1    // % da altura da janela
  },


  colorScheme: [
    "#66c2a5",
    "#fc8d62",
    "#8da0cb",
    "#e78ac3",
    "#a6d854"
  ],


  node: {
    radius: 7,
    stroke: "#fff",
    strokeWidth: 1
  },

  forces: {
    collideRadius: 7,
    collideStrength: 1,
    xStrength: 0.05,
    yStrength: 0.05,
    alphaDecay: 0.02,          // taxa de decaimento mais alta → converge mais rápido
    velocityDecay: 0.35,        // reduz a inércia dos nós
    dragAlphaTarget: 2       // “reaquece” na hora do drag
  },

  labelYOffset: 100
};

export default SETTINGS;


===== C:\Code\Brazil-As-100-People\.\style\index.css =====
:root {
  font-family: "Source Serif 4", serif;
}

html {
  min-height: 100%;
  height: 100%;
}

body {
  height: 100%;
  margin: 0;
}

#content {
  position: absolute;
  right: 0;
  height: inherit;
  width: 40%;
  background-color: grey;
}

#visualization {
  height: 100%;
  width: 60%;
  position: fixed;
}

#visualization svg {
  height: 100%;
  width: 100%;
}
/* retire a “trava” de altura fixa */
html, body { height: auto; min-height: 100%; }

/* mantém o primeiro gráfico “pinned”, mas deixa rolar */
#visualization      { position: sticky; top: 0; width: 60%; height: 100vh; }
#visualization svg  { width: 100%;  height: 100%; }

#content            { position: fixed; right: 0; top: 0;
                       width: 40%; height: 100vh; background: grey; }

#bars-wrapper       { position: relative; width: 60%; margin-left: 40%; }
#bars-svg           { width: 100%; height: 80vh; }
#scroll-sentinel    { position: absolute; top: 10vh; width: 100%; height: 1px; }
